{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LPC",
	"scopeName": "source.lpc",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#scope-resolution"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.lpc",
					"match": "//.*$"
				},
				{
					"name": "comment.block.lpc",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.lpc"
						}
					}
				}
			]
		},
		"preprocessor": {
			"patterns": [
				{
					"name": "meta.preprocessor.directive.lpc",
					"match": "^\\s*(#)\\s*(define|undef|ifdef|ifndef|if|else|elif|endif|include)\\b",
					"captures": {
						"1": {
							"name": "punctuation.definition.directive.lpc"
						},
						"2": {
							"name": "keyword.control.directive.lpc"
						}
					}
				},
				{
					"name": "meta.preprocessor.macro.lpc",
					"match": "^\\s*(#)\\s*define\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "punctuation.definition.directive.lpc"
						},
						"2": {
							"name": "entity.name.function.preprocessor.lpc"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.lpc",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.lpc",
							"match": "\\\\([abfnrtv\\\\'\"]|x[0-9A-Fa-f]{2}|[0-7]{1,3})"
						}
					]
				}
			]
		},
		"characters": {
			"name": "string.quoted.single.lpc",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.lpc",
					"match": "\\\\([abfnrtv\\\\'\"]|x[0-9A-Fa-f]{2}|[0-7]{1,3})"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.lpc",
					"match": "\\b([1-9][0-9]*|0)\\b"
				},
				{
					"name": "constant.numeric.octal.lpc",
					"match": "\\b0[0-7]+\\b"
				},
				{
					"name": "constant.numeric.hex.lpc",
					"match": "\\b0[xX][0-9A-Fa-f]+\\b"
				},
				{
					"name": "constant.numeric.float.lpc",
					"match": "\\b([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([eE][-+]?[0-9]+)?\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "storage.modifier.extends.lpc",
					"match": "\\binherit\\b"
				},
				{
					"name": "keyword.control.lpc",
					"match": "\\b(if|else|while|do|for|break|continue|return|switch|case|default|catch|try|rlimits|goto)\\b"
				},
				{
					"name": "keyword.other.lpc",
					"match": "\\b(private|static|atomic|nomask|varargs|new|nil|operator)\\b"
				}
			]
		},
		"types": {
			"name": "storage.type.lpc",
			"match": "\\b(void|int|float|string|object|mapping|mixed)\\b"
		},
		"function-calls": {
			"match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.lpc"
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.lpc",
					"match": "(?<=[0-9a-zA-Z_])\\*(?![*])|(?<=\\s)\\*(?![*])"
				},
				{
					"name": "keyword.operator.logical.lpc",
					"match": "&&|\\|\\||!"
				},
				{
					"name": "keyword.operator.comparison.lpc",
					"match": "==|!=|<=|>=|<|>"
				},
				{
					"name": "keyword.operator.assignment.lpc",
					"match": "=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>="
				},
				{
					"name": "keyword.operator.bitwise.lpc",
					"match": "&|\\||\\^|~|<<|>>"
				}
			]
		},
		"scope-resolution": {
			"patterns": [
				{
					"name": "meta.function-call.scope-resolution.lpc",
					"match": "(::)([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
					"captures": {
						"1": {
							"name": "keyword.operator.scope-resolution.lpc"
						},
						"2": {
							"name": "entity.name.function.lpc"
						},
						"3": {
							"name": "punctuation.definition.parameters.begin.lpc"
						}
					}
				},
				{
					"name": "meta.scope-resolution.lpc",
					"match": "(::)([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "keyword.operator.scope-resolution.lpc"
						},
						"2": {
							"name": "variable.other.lpc"
						}
					}
				}
			]
		}
	}
}
